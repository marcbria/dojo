#########################################################################
#
# General settings# File: docker-compose.yml
#
# Site:      {{ service }}
# Tool:      {{ dojo.tool }}
# Version:   {{ dojo.version }}
# Creation:  {{ fileCreation }}
#
#########################################################################

version: '3.8'

services:

  app:
    # The official Traefik docker image (v.2)
    image: {{ images.app | default('treaefik:2.11') | safe }}
    container_name: ${COMPOSE_PROJECT_NAME:-{{ dojo.id | safe | string | lower }}}
    # security_opt:
    #  - no-new-privileges:true
    restart: always
    volumes:
      # So that Traefik can listen to Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # tls-certificates path (TLS)
      - ./volumes/config/certificates/acme:/etc/traefik/acme
      # Static certificates
      - ./volumes/config/certificates/host:/etc/traefik/host
      # Dynamc providers
      - ./volumes/config/providers:/etc/traefik/providers
    ports:
      - ${HTTP_PORT:-80}:{{ app.ports.http | default('80') | safe }}
      - ${HTTPS_PORT:-443}:{{ app.ports.https | default('443') | safe }}
      - ${API_HTTP_PORT:-8080}:{{ app.ports.api | default('8080') | safe }}
    command:
      ###########################################
      #   Static Configuration harnessing CLI   #
      ###########################################
      # Activate dashboard.
      - "--api.dashboard={{ app.api.dashboard | safe | string | lower }}"
      - "--api.insecure={{ app.api.insecure | safe | string | lower }}"
{% if app.pilot.token %}
      - "--pilot.token={{ app.pilot.token | safe }}"
{% endif %}

      # Log level in traefik logs (Default: ERROR)
      - "--log.level=${DEBUG_LEVEL:-INFO}"

      # Enable Docker backend with default settings.
      - "--providers.docker=true"
      # Do not expose containers by default.
      - "--providers.docker.exposedbydefault=false"
      # Default Docker network used.
      - "--providers.docker.network={{ app.network | default('proxy') | safe}}"

      # Dynamic providers:
      - "--providers.file.directory=/etc/traefik/providers"
      - "--providers.file.watch=true"

      # --entrypoints.<name>.address for ports
      # 80 (i.e., name = webinsercure)
      - "--entrypoints.webinsecure.address=:{{ app.ports.http | default('80') | safe }}"
      # 443 (i.e., name = websecure)
      - "--entrypoints.websecure.address=:{{ app.ports.https | default('443') | safe }}"

{% if app.ports.redirect %}
      # Redirection to https: Link in your container to be applied.
      - "--entrypoints.webinsecure.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.webinsecure.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.webinsecure.http.redirections.entrypoint.permanent=true"
{% endif %}

      # Certificatesresolvers (HTTP, TLS, DNS mutualy exclusive)
{% if app.certificate.method == 'http' %}
      # Via HTTP: RECOMENDED - Be sure port 80 (webinsecure) is open.
      - "--certificatesresolvers.leresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=webinsecure"
{% elif app.certificate.method == 'tls' %}
      # Via TLS: DEPRECATED by Let's Encrypt.
      - "--certificatesresolvers.leresolver.acme.tlschallenge=true"
{% elif app.certificate.method == 'dns' %}
      # Via DNS: Not tested.
      - "--certificatesresolvers.leresolver.acme.dnschallenge=true"
{% endif %}
{% if app.certificate.staging %}
      # Staging server to test without hitting letsencrypt limits.
      # From: https://doc.traefik.io/traefik/https/acme/#caserver
      - "--certificatesResolvers.leresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
{% endif %}
      # Email address used for registration
      - "--certificatesresolvers.leresolver.acme.email={{ app.certificate.email | safe }}"
      - "--certificatesresolvers.leresolver.acme.storage=/etc/traefik/acme/acme.json"

    networks:
      # This is the network over which Traefik communicates with other containers.
      - {{ app.network | default('proxy') | safe}}

    labels:
      ################################################
      #   Dynamic configuration with Docker Labels   #
      ################################################
      # You can tell Traefik to consider (or not) this container by setting traefik.enable to true or false.
      # We need it for the dashboard
      traefik.enable: true

      # Dashboard
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.rule: Host(`${DASHBOARD_DOMAIN:-{{ dojo.domain | safe }}}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls.certresolver: leresolver

      # Declaring the user list
      #
      # Note=all dollar signs in the hash need to be doubled for escaping.
      # To create user:password pair, it's possible to use this command:
      # echo $(htpasswd -nb user password) and then save user and password in
      # the .env file
      #
{% if app.credentials %}
      traefik.http.routers.traefik.middlewares: traefik-auth
      # traefik.http.middlewares.traefik-auth.basicauth.users: ${DASHBOARD_USERNAME}:${DASHBOARD_PASSWORD}
      traefik.http.middlewares.traefik-auth.basicauth.users: {{ app.credentials.username }}:{{ app.credentials.password }}
{% endif %}

networks:
  {{ app.network | default('proxy') | safe}}:
    external: true
