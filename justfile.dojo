# Justfile for dojo actions

# This list of actions
dojo:
    @just -l | grep dojo

# Shows how to use the script.
dojo-list:
    # Full list of infrastructure playbooks is:
    @ls -1 {{dojoPath}}/run/ | grep yml  
    @ #ls -1 {{dojoPath}}/info/ | grep yml  
    # Run "just dojo" for a full list of actions.

# Syntax and examples
dojo-info:
    # README DOJO
    # To get a list of actions use "just dojo"
    @cat {{dojoPath}}/README.md
    @# TBD
    # Sample of calls:
    # $ just dojo-play config journalName remoteServer            # Creates a config.inc.php for journalName in the remoteServer.
    # $ just dojo-play create-journal journalName remoteServer    # And get a full OJS installed
    @# TBD: $ dojo backup journalName                 # Backup a full journal
    @# TBD: $ dojo clone journalName journalClone     # Clone a journal
    @# TBD: $ dojo upgrade journalClone 3.4.0-6       # Upgrade a journal to the s
    @# TBD: $ dojo stop journalName                   # Stop a journal
    @# TBD: $ dojo frozen journalName                 # Makes a journal work in read-only mode.

# TODO: Creates an manages an ansible vault with default. Actions are:
# - create: Vault is saved at "configs/secrets.yml" with the password passed and stored at .vault.key (check your permissions).
# - edit:   Edits the default vault in "configs/secrets.yml" with the password stored at .vault.key:
#
# Manages the ansible vault.
dojo-vault action:
    @if [[ "${action}" == "create" ]]; then \
        echo "${2}" >> ${vaultKey}; \
        ansible-vault create --vault-password-file=${vaultKey} ${vaultPath} \
    elif [[ "${create}" == "edit" ]]; then \
        ansible-vault edit --vault-password-file={{vaultKey}} {{vaultPath}} \
    else \
        echo "Unknown action"; \
    fi

# DEPRECATED: Create a config.inc.php based on the specified dictionary name (ie: periodicum). Vault need to be created first.
# Crea un fichero en "/tmp/>name>.config.inc.php" con la plantilla de /templates/<site>.yml y las variables del diccionario "/sites/<name>.yml"
_dojo-site-old action name:
    #!/bin/bash
    echo "{{action}} - {{name}}"
    case ${action} in \
        create-config) \
            ansible-playbook -i host, --vault-password-file {{vaultKey}} ./pkp-config.yml -e "site={{ name }}" \
        ;; \
        create-all) \
            echo "Create ALL: {{ action }} - {{ name }}" \
        ;; \
    esac

# Runs an action with:
# - Action: Is a playbook from playbooks/dojo/run (no need to add .yml).
# - Site: A "site" is an ansible dictionary read from inventory/sites.
# - Host: A "host" Acording to the inverntory/hosts.yml
# - Args: Additional arguments.
# 
# Runs an action (playbook) with the specified site (dictionary) in the selected host.
dojo-play action site host *args:
    ansible-playbook -i {{ host }}, --vault-password-file {{ dojoPath }}/run/{{ vaultKey }} {{ dojoPath }}/run/{{ action }}.yml -e "site={{ site }}" {{ args }}

# Creates a full site with acording to the dictionary in sites/<site>.yml 
# Following playbooks will be called: pkp-site-folders > pkp-config > pkp-apache > pkp-docker-compose
#
# Multiplaybook: Creates a full site acording to the site's dictionary.
dojo-create site host *args:
    @echo "Are you sure you like to run playbooks pkp-site-folders > pkp-config > pkp-docker-compose \
    for [{{ site }}] on [{{ host }}]?" && \
    ansible-playbook -i {{ host }}, --vault-password-file {{ dojoPath }}/run/{{ vaultKey }} \
     {{ dojoPath }}/run/pkp-site-folders.yml \
     {{ dojoPath }}/run/pkp-config.yml \
     {{ dojoPath }}/run/pkp-apache.yml \
     {{ dojoPath }}/run/pkp-docker-compose.yml \
     {{ dojoPath }}/run/pkp-env.yml \
     {{ dojoPath }}/run/pkp-permissions.yml \
     -e "site={{ site }}" -K {{ args }}